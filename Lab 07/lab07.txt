CREATE TABLE error_log(user_name VARCHAR(20), error_number INT, error_msg VARCHAR(100));

CREATE OR REPLACE PROCEDURE change_title(v_job_id VARCHAR, v_new_title VARCHAR) IS
    error_number error_log.error_number%TYPE;
    error_info error_log.error_msg%TYPE;
    no_jobs_updated EXCEPTION;
    BEGIN
        UPDATE jobs
        SET jobs.job_title = v_new_title
        WHERE jobs.job_id = v_job_id;
        IF SQL%NOTFOUND THEN RAISE no_jobs_updated;
        END IF;
        EXCEPTION
            WHEN no_jobs_updated THEN
            error_number := SQLCODE;
            error_info := SQLERRM;
            DBMS_OUTPUT.PUT_LINE('Error ' || error_number);
            INSERT INTO error_log(user_name, error_number, error_msg)
            VALUES (USER, error_number, error_info);
    END;

BEGIN
    change_title('abc', 'test');
    change_title('JAN', 'Head Janitor');
END;


CREATE OR REPLACE PROCEDURE delete_job(v_job_id VARCHAR) IS
    error_number error_log.error_number%TYPE;
    error_info error_log.error_msg%TYPE;
    no_jobs_deleted EXCEPTION;
    BEGIN
        DELETE FROM jobs
        WHERE jobs.job_id = v_job_id;
        IF SQL%NOTFOUND THEN RAISE no_jobs_deleted;
        END IF;
        EXCEPTION
            WHEN no_jobs_deleted THEN
            error_number := SQLCODE;
            error_info := SQLERRM;
            DBMS_OUTPUT.PUT_LINE('Error ' || error_number);
            INSERT INTO error_log(user_name, error_number, error_msg)
            VALUES (USER, error_number, error_info);
    END;

BEGIN
    delete_job('abc');
    delete_job('JAN');
END;


CREATE OR REPLACE PROCEDURE get_employee_salary(emp_id NUMBER, v_name OUT VARCHAR, v_salary OUT NUMBER) IS
    BEGIN
        SELECT last_name, salary INTO v_name, v_salary FROM employees
        WHERE employee_id = emp_id;
    END;
    
DECLARE
    v_name employees.last_name%TYPE;
    v_salary employees.salary%TYPE;
BEGIN
    get_employee_salary(100, v_name, v_salary);
    DBMS_OUTPUT.PUT_LINE(v_name || ', ' || v_salary);
END;
