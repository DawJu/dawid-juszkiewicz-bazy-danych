CREATE TABLE department_archive(department_id INT, department_name VARCHAR(50), close_date DATE, last_manager VARCHAR(50));

CREATE OR REPLACE TRIGGER add_to_archive AFTER DELETE ON departments
    FOR EACH ROW
    DECLARE
        PRAGMA AUTONOMOUS_TRANSACTION;
        v_manager_name VARCHAR(50); 
        v_first_name VARCHAR(50);
        v_last_name VARCHAR(50);
    BEGIN
        SELECT first_name, last_name INTO v_first_name, v_last_name
            FROM employees WHERE employee_id = :OLD.manager_id;
        v_manager_name := v_first_name || ' ' || v_last_name;
        INSERT INTO department_archive VALUES(:OLD.department_id, :OLD.department_name, CURRENT_DATE, v_manager_name);
        COMMIT;
    END;

DELETE FROM departments WHERE department_id = 270;


CREATE TABLE thief(theft_id INT PRIMARY KEY, user_name VARCHAR(50), action_time TIMESTAMP);

CREATE OR REPLACE TRIGGER employees_salary_check
    BEFORE INSERT OR UPDATE OF salary ON employees
    FOR EACH ROW
    WHEN(NEW.salary NOT BETWEEN 2000 AND 26000)
    BEGIN
        INSERT INTO thief VALUES(thief_id.nextval, USER, CURRENT_TIMESTAMP);
        IF INSERTING THEN RAISE_APPLICATION_ERROR(-20500, 'Cannot insert');
        ELSIF UPDATING THEN RAISE_APPLICATION_ERROR(-20503, 'Cannot update');
        END IF;
    END;

INSERT INTO employees(employee_id, last_name, email, hire_date, job_id, salary)
    VALUES(500, 'test', 'test', CURRENT_DATE, 'AC_MGR', 30000);

UPDATE employees SET salary = 27000 WHERE employee_id = 500;


CREATE SEQUENCE SEQ_EMPLOYEES_ID MINVALUE 1 MAXVALUE 9999990 INCREMENT BY 1
    START WITH 207 CACHE 20 NOORDER NOCYCLE NOKEEP NOSCALE GLOBAL;

CREATE OR REPLACE TRIGGER employee_autoincrement
    BEFORE INSERT ON employees
    FOR EACH ROW
    BEGIN
        SELECT seq_employees_id.nextval INTO :NEW.employee_id
        FROM dual;
    END;

INSERT INTO employees(employee_id, last_name, email, hire_date, job_id, salary)
    VALUES(seq_employees_id.nextval, 'test', 'test', CURRENT_DATE, 'AC_MGR', 5000);


CREATE OR REPLACE TRIGGER job_grades_deny
    BEFORE INSERT OR UPDATE OR DELETE ON job_grades
    BEGIN
        RAISE_APPLICATION_ERROR(-20422, 'Operation not allowed');
    END;

INSERT INTO job_grades VALUES('G', 201000, 300000);
